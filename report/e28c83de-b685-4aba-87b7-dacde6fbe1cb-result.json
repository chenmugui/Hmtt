{"name": "test_mp_login[13812345678-246811-13812345678]", "status": "broken", "statusDetails": {"message": "AttributeError: module 'allure' has no attribute 'attach_type'", "trace": "self = <uiAutoTestHmtt.scripts.test01_mp_login.TestMpLogin object at 0x000001D67F0B1748>, username = '13812345678', code = '246811', expect = '13812345678'\n\n    @pytest.mark.parametrize(\"username,code,expect\", read_yaml(\"mp_login.yaml\"))\n    def test_mp_login(self, username, code, expect):\n        # 调用登录业务方法\n        self.mp.page_mp_login(username, code)\n        try:\n            # 断言\n>           assert expect == self.mp.page_get_nickname()\n\nscripts\\test01_mp_login.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <uiAutoTestHmtt.page.page_mp_login.PageMpLogin object at 0x000001D67F0EF0F0>\n\n    def page_get_nickname(self):\n        # 调用父类中 获取文本方法\n>       return self.base_get_text(uiAutoTestHmtt.page.mp_nickname)\n\npage\\page_mp_login.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <uiAutoTestHmtt.page.page_mp_login.PageMpLogin object at 0x000001D67F0EF0F0>, loc = ('css selector', '.user-name')\n\n    def base_get_text(self, loc):\n        \"\"\"\n        :param loc: 元素定位信息\n        :return: 返回元素的文本值\n        \"\"\"\n>       log.info(\"正在对：{} 元素获取文本操作！，获取的文本值：{}\".format(loc, self.base_find(loc).text))\n\nbase\\base.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <uiAutoTestHmtt.page.page_mp_login.PageMpLogin object at 0x000001D67F0EF0F0>, loc = ('css selector', '.user-name'), timeout = 30, poll = 0.5\n\n    def base_find(self, loc, timeout=30, poll=0.5):\n        \"\"\"\n        :param loc: 格式为列表或元祖，内容：元素定位信息使用By类\n        :param timeout: 查找元素超时时间，默认 30秒\n        :param poll: 查找元素频率 默认为0.5\n        :return: 元素\n        \"\"\"\n        log.info(\"正在查找元素：{}\".format(loc))\n        return (WebDriverWait(self.driver,\n                              timeout=timeout,\n>                             poll_frequency=poll).until(lambda x: x.find_element(*loc)))\n\nbase\\base.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cf91b1698653e759e0a2156fe2ead98b\")>, method = <function Base.base_find.<locals>.<lambda> at 0x000001D67F0DE6A8>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nc:\\python\\python37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <uiAutoTestHmtt.scripts.test01_mp_login.TestMpLogin object at 0x000001D67F0B1748>, username = '13812345678', code = '246811', expect = '13812345678'\n\n    @pytest.mark.parametrize(\"username,code,expect\", read_yaml(\"mp_login.yaml\"))\n    def test_mp_login(self, username, code, expect):\n        # 调用登录业务方法\n        self.mp.page_mp_login(username, code)\n        try:\n            # 断言\n            assert expect == self.mp.page_get_nickname()\n        except Exception as e:\n            log.error(\"断言出错，错误信息：{}\".format(e))\n            print(\"错误原因：\", e)\n            # 截图\n>           self.mp.base_get_img()\n\nscripts\\test01_mp_login.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base.py:68: in base_get_img\n    self.__base_write_img()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <uiAutoTestHmtt.page.page_mp_login.PageMpLogin object at 0x000001D67F0EF0F0>\n\n    def __base_write_img(self):\n        # 1. 获取图片文件流\n        with open(\"./image/err.png\", \"rb\") as f:\n            # 2. 调用allure.attach附加方法\n>           allure.attach(\"错误原因：\", f.read(), allure.attach_type.PNG)\nE           AttributeError: module 'allure' has no attribute 'attach_type'\n\nbase\\base.py:75: AttributeError"}, "attachments": [{"name": "log", "source": "4fc1e173-5fcd-4ae3-b92a-bec0d7378beb-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'13812345678'"}, {"name": "code", "value": "'246811'"}, {"name": "expect", "value": "'13812345678'"}], "start": 1620284568352, "stop": 1620284626106, "uuid": "9f885308-8aff-48de-ba21-3811394d3399", "historyId": "c923f6e70d4b2f3d7599c6390022a18c", "testCaseId": "b1928a7174b0d14afd7479ec3844ea33", "fullName": "scripts.test01_mp_login.TestMpLogin#test_mp_login", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test01_mp_login"}, {"name": "subSuite", "value": "TestMpLogin"}, {"name": "host", "value": "JVAH47KLOGVBZ8N"}, {"name": "thread", "value": "11700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test01_mp_login"}]}